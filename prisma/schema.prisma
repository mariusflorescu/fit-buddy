// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("examples")
}

//
//  NEXT AUTH
//
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  ADMIN
  TRAINER
  USER
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  role            Role      @default(USER)
  accounts        Account[]
  sessions        Session[]
  entries         Entry[]
  classes         Class[]
  stripe_customer String?   @unique
  is_subscribed   Boolean   @default(false)
  subscription_id String?   @unique

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

//
//  GYM
//

enum Entry_Types {
  GYM
  CLASS
}

model Entry {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  entryType Entry_Types @default(GYM)

  @@map("entries")
}

model Class {
  id              String          @id @default(cuid())
  trainerId       String
  trainer         User            @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  name            String          @db.Text
  description     String          @db.LongText
  createdAt       DateTime        @default(now())
  classSchedule   ClassSchedule[]
  classScheduleId String

  @@map("classes")
}

enum Schedule_Types {
  EVERY
  ONCE
}

enum Days {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model ClassSchedule {
  id             String          @id @default(cuid())
  classId        String
  class          Class           @relation(fields: [classId], references: [id], onDelete: Cascade)
  type           Schedule_Types? @default(EVERY)
  once_day       Days?
  once_time      DateTime?       @db.Time()
  recurring_day  Days?
  recurring_time DateTime?       @db.Time()

  @@map("class_schedule")
}
